# Speeduino mega2560 Arduino Project Makefile
# 
# Adapted by RickyRockrat, Mar 2022.  
# Built against 1.8.3 ArduinoCore-avr
# and Time v1.6 https://github.com/PaulStoffregen/Time
#
# 
# Makefile Based on:
# Repetier-Firmware Arduino Project Makefile
# Arduino 0011 Makefile
# Arduino adaptation by mellis, eighthave, oli.keller
#
# To modify for other platforms, change these (at least):
#  MCU PORT VARIANT
#
# You will likely need different libraries.
#
# $Id$

FORMAT:=ihex
TARGET = speeduino
#UPLOAD_RATE = 38400
AVRDUDE_PROGRAMMER = stk500v2
#AVRDUDE_PROGRAMMER = 2232HIO
PORT?=/dev/ttyACM0
MCU = atmega2560
BOARD = board_avr2560
# for ArduinoCore-avr
VARIANT=mega
F_CPU = 16000000

BASE?=$(shell dirname $$(dirname $(CURDIR)))
############################################################################
# Below here nothing should be changed...
# look in core/usr/share/arduino/revisions.txt, use ARDUINO def from there
ARDUINO_VER = ARDUINO=183
ARD_BASE = $(BASE)/core
ARDUINO = $(ARD_BASE)/cores/arduino
PINSH := $(ARD_BASE)/variants/$(VARIANT)/pins_arduino.h

# in ARDUINO dir:
HW_SER1_SRC:=HardwareSerial3.cpp HardwareSerial.cpp HardwareSerial0.cpp
HW_C_SRC:=hooks.c

AVR_TOOLS_PATH = /usr/bin
_SRC= pins_arduino.c wiring.c wiring_analog.c wiring_digital.c wiring_pulse.c $(HW_C_SRC) wiring_shift.c WInterrupts.c
SRC =  $(addprefix $(ARDUINO)/,$(_SRC))
_XSRC = HardwareSerial.cpp WMath.cpp Print.cpp WString.cpp abi.cpp $(HW_SER1_SRC)

CXXSRC = $(addprefix $(ARDUINO)/,$(_XSRC))
CXXSRC += $(shell ls *.cpp) 

# Auto-add libraries from core
ARDLIBS:=EEPROM SPI Time
ARDLPATH:=$(shell echo $(ARDLIBS)|tr ' ' '\n'|while read l; do echo $(ARD_BASE)/libraries/$$l/src; done)
ARDINC:=$(addprefix -I,$(ARDLPATH))
SRC+=$(shell for d in $(ARDLPATH); do F="$$(cd $$d; ls -1 *.c)"; echo "$$F"|while read f; do echo "$$d/$$f"; done; done)
SRC+=$(shell for d in $$(ls src); do F="$$(cd src/$$d; ls -1 *.c)"; echo "$$F"|while read f; do echo "src/$$d/$$f"; done; done)

CXXSRC+=$(shell for d in $(ARDLPATH); do F="$$(cd $$d; ls -1 *.cpp)"; echo "$$F"|while read f; do echo "$$d/$$f"; done; done)
CXXSRC+=$(shell for d in $$(ls src); do F="$$(cd src/$$d; ls -1 *.cpp)"; echo "$$F"|while read f; do echo "src/$$d/$$f"; done; done)
CXXSRC+=$(shell ls *.cpp)

# Name of this Makefile (used for "make depend").
MAKEFILE = Makefile
GCC_VER=$(shell $(CC) --version|grep GCC|sed 's!.* !!'|tr -d '.' )
# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
DEBUG = stabs
# Using 3 here will fill the flash, and s will give several kB more.
OPT = 2

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU)
CXXDEFS = -DF_CPU=$(F_CPU)

# Place -I options here
CINCS := -I$(ARDUINO) $(ARDINC)
CXXINCS := -I$(ARDUINO) $(ARDINC) 

# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
CSTANDARD = -std=gnu99
CDEBUG = -g$(DEBUG)
CWARN = -Wall
CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)

CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -O$(OPT) $(CWARN) $(CSTANDARD) $(CEXTRA) -MD -MP -D$(ARDUINO_VER)
CXXFLAGS = $(CDEFS) $(CXXINCS) -O$(OPT) -MD -MP -D$(ARDUINO_VER)
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs 
#LDFLAGS = -lm -lC -Wl,-Map=applet/$(TARGET).map

# Programming support using avrdude. Settings and variables.
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:applet/$(TARGET).hex:i
AVRDUDE_FLAGS = -D -C $(AVRDUDE_CONF) \
-p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) 
#-b $(UPLOAD_RATE)

# Program settings
CC := $(AVR_TOOLS_PATH)/avr-gcc
CXX = $(AVR_TOOLS_PATH)/avr-g++
OBJCOPY = $(AVR_TOOLS_PATH)/avr-objcopy
OBJDUMP = $(AVR_TOOLS_PATH)/avr-objdump
AR  = $(AVR_TOOLS_PATH)/avr-ar
SIZE = $(AVR_TOOLS_PATH)/avr-size --mcu=$(MCU)
NM = $(AVR_TOOLS_PATH)/avr-nm
#AVRDUDE = $(INSTALL_DIR)/hardware/tools/avrdude
AVRDUDE = /usr/bin/avrdude
AVRDUDE_CONF = /etc/avrdude.conf
REMOVE = rm -f
MV = mv -f

VPATH=.

GCC_WORKAROUND:=$(shell $(CC) --version|grep GCC|sed 's!.* !!'|tr -d '.'|sed 's!$$!<480!'|bc)
ifeq ($(GCC_WORKAROUND),1)
LDFLAGS = -lm -lc -Wl,-Map=applet/$(TARGET).map -lc
else
LDFLAGS = -lm -Wl,-Map=applet/$(TARGET).map
endif
# Define all object files.
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o) 

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CXXSRC:.cpp=.lst) $(SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS)
ALL_CXXFLAGS = -std=gnu++11 -mmcu=$(MCU) -I. $(CXXFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)
RELIB?=0
help:
	@echo "Targets are build, clean, cleanall, sizeafter, and upload"
	@echo "for upload, set PORT for the serial terminal"
	@echo " ex: make PORT=$(PORT) upload"
	@echo " to use a different ARDUINO tag, set ARDUINO_TAG to tag, i.e. ARDUINO_TAG=$(ARDUINO_TAG)"
	@echo " Set RELIB to just check out a differene ARDUINO tag and rebuild"

# Default target.
all:  build sizeafter
ifeq ($(RELIB),1)
build: cleanlib
endif
build: applet/$(TARGET).cpp elf hex lss

applet:
	mkdir $@

$(ARDUINO)/pins_arduino.c: $(PINSH)
	cp $(PINSH) $(ARDUINO)
	echo '#include <$(PINSH)>' > $@

$(ARDUINO):
ifeq ($(RELIB),1)
	./get_arduino_libs.sh $(ARDUINO_TAG) 1
else
	./get_arduino_libs.sh $(ARDUINO_TAG) 
endif

applet/$(BOARD).cpp: | applet 

applet/$(BOARD).cpp: $(BOARD).ino
	echo '#define CORE_AVR ' > applet/$(BOARD).cpp
	cat $(BOARD).ino >> applet/$(BOARD).cpp
	
applet/core.a applet/$(TARGET).cpp (OBJ) : | $(ARDUINO)

applet/$(TARGET).cpp: | applet
	# Here is the "preprocessing", because what we needed was YET ANOTHER source format.
	# It creates a .cpp file based with the same name as the project.
	# On top of the new .cpp file comes the board file.
	# At the end there is a generic main() function attached.
	# Then the .cpp file will be compiled. Errors during compile will
	# refer to this new, automatically generated, file. 
	cat $(TARGET).ino $(BOARD).ino > $@
	ls -1 *.ino |grep -v 'board_\|speeduino'|sort>arduino.sucks
	for f in $$(cat arduino.sucks); do echo "\n/*file $$f*/" >> $@; cat $$f >> $@; done
	cat $(ARDUINO)/main.cpp >> $@

elf: applet/$(TARGET).elf
hex: applet/$(TARGET).hex
eep: applet/$(TARGET).eep
lss: applet/$(TARGET).lss 
sym: applet/$(TARGET).sym

# Program the device.  
upload: applet/$(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


	# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) applet/$(TARGET).hex
ELFSIZE = $(SIZE) -C applet/$(TARGET).elf
sizebefore:
	@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000 


coff: applet/$(TARGET).elf
	$(COFFCONVERT) -O coff-avr applet/$(TARGET).elf $(TARGET).cof


extcoff: $(TARGET).elf
	$(COFFCONVERT) -O coff-ext-avr applet/$(TARGET).elf $(TARGET).cof


.SUFFIXES: .elf .hex .eep .lss .sym

%.hex:%.elf
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep:%.elf
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
%.lss:%.elf
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
%.sym:%.elf
	$(NM) -n $< > $@

	# Link: create ELF output file from library.
applet/$(TARGET).elf: applet/core.a applet/$(BOARD).o
	@echo "GCC_VER=$(GCC_VER) GCC_W=$(GCC_WORKAROUND)"
	$(CXX) $(ALL_CXXFLAGS) -ffunction-sections -Wl,--gc-sections -o $@ applet/$(TARGET).cpp -L. applet/core.a $(LDFLAGS) 
	$(ELFSIZE)

applet/core.a: $(OBJ) | applet
	@echo "SRC = $(SRC)"
	@for i in $(OBJ); do echo $(AR) rcs applet/core.a $$i; $(AR) rcs applet/core.a $$i; done



# Compile: create object files from C++ source files.
%.o:%.cpp
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@ 

# Compile: create object files from C source files.
%.o:%.c
	@echo "ARDINC=$(ARDINC)"
	$(CC) -c $(ALL_CFLAGS) $< -o $@ 

# For bullshit Arduino
%.o:%.ino
	@mkdir -p tmpd
	cp $< tmpd/$<.cpp
	#$(CC) -c $(ALL_CFLAGS) tmpd/$<.c -o $@
	$(CXX) -c $(ALL_CXXFLAGS) tmpd/$<.cpp -o $@

# Compile: create assembler files from C source files.
%.s:%.c
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
%.o:%S
	$(CC) -c $(ALL_ASFLAGS) $< -o $@



# Target: clean project.
clean:
	$(REMOVE) -r applet $(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d) 

cleanlib: clean
	$(REMOVE) -r arduino.lib

cleanall: clean cleanlib
	$(REMOVE) -r   ard.all

depend:
	if grep '^# DO NOT DELETE' $(MAKEFILE) >/dev/null; \
	then \
		sed -e '/^# DO NOT DELETE/,$$d' $(MAKEFILE) > \
			$(MAKEFILE).$$$$ && \
		$(MV) $(MAKEFILE).$$$$ $(MAKEFILE); \
	fi
	echo '# DO NOT DELETE THIS LINE -- make depend depends on it.' \
		>> $(MAKEFILE); \
	$(CC) -M -mmcu=$(MCU) $(CDEFS) $(CINCS) $(SRC) $(ASRC) >> $(MAKEFILE)

.PHONY:	all build elf hex eep lss sym program coff extcoff clean cleanlib cleanall depend applet_files sizebefore sizeafter
